# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '1101ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import cv2
import zhtts
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QMovie
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox
from playsound import playsound

from speech2text_model.models import record_speech
from rasa_dialog_1114 import dialog_with_pop

class Ui_MainWindow(object):
    # 初始化
    def __init__(self, MainWindow):
        super(Ui_MainWindow, self).__init__()

        # self.show_camera = None
        self.timer_camera = QtCore.QTimer()
        self.setupUi(MainWindow)
        self.retranslateUi(MainWindow)
        self.cap = cv2.VideoCapture(cv2.CAP_DSHOW)
        self.CAM_NUM = 0
        self.exist_face = False

        # 虚拟形象应该放在setupui后面，显示图片
        # pic = QPixmap('popcat2.gif')
        # self.label_botface.setPixmap(pic)
        # self.label_botface.setScaledContents(True)
        self.gif = QMovie('popcat1.gif')
        self.label_botface.setMovie(self.gif)
        self.label_botface.setScaledContents(True)
        # self.gif.start()

        global face_detect
        face_detect = cv2.CascadeClassifier('./venv/Lib/site-packages/cv2/data/haarcascade_frontalface_alt2.xml')
        print('init')
        self.slot_init()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 760)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_botface = QtWidgets.QLabel(self.centralwidget)
        self.label_botface.setGeometry(QtCore.QRect(70, 30, 311, 231))
        self.label_botface.setObjectName("label_botface")
        self.label_userface = QtWidgets.QLabel(self.centralwidget)
        self.label_userface.setGeometry(QtCore.QRect(70, 400, 311, 231))
        self.label_userface.setObjectName("label_userface")
        self.label_botsays = QtWidgets.QLabel(self.centralwidget)
        self.label_botsays.setGeometry(QtCore.QRect(480, 30, 300, 400))
        self.label_botsays.setObjectName("label_botsays")
        self.pushButton_open = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_open.setGeometry(QtCore.QRect(40, 300, 81, 41))
        self.pushButton_open.setObjectName("pushButton_open")
        self.pushButton_close = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_close.setGeometry(QtCore.QRect(140, 300, 81, 41))
        self.pushButton_close.setObjectName("pushButton_close")
        self.pushButton_startsp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_startsp.setGeometry(QtCore.QRect(240, 300, 81, 41))
        self.pushButton_startsp.setObjectName("pushButton_startsp")
        self.pushButton_stopsp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_stopsp.setGeometry(QtCore.QRect(340, 300, 81, 41))
        self.pushButton_stopsp.setObjectName("pushButton_stopsp")
        self.label_usersays = QtWidgets.QLabel(self.centralwidget)
        self.label_usersays.setGeometry(QtCore.QRect(480, 300, 300, 400))
        self.label_usersays.setObjectName("label_usersays")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_botface.setText(_translate("MainWindow", "bot face"))
        self.label_userface.setText(_translate("MainWindow", "my face"))
        self.label_botsays.setText(_translate("MainWindow", "bot_says"))
        self.pushButton_open.setText(_translate("MainWindow", "打开摄像"))
        self.pushButton_close.setText(_translate("MainWindow", "关闭摄像"))
        self.pushButton_startsp.setText(_translate("MainWindow", "开始对话"))
        self.pushButton_stopsp.setText(_translate("MainWindow", "停止对话"))
        self.label_usersays.setText(_translate("MainWindow", "user_says"))

    def slot_init(self):
        self.timer_camera.timeout.connect(self.show_camera)
        self.pushButton_open.clicked.connect(self.open_camera)
        self.pushButton_close.clicked.connect(self.close_camera)
        self.pushButton_startsp.clicked.connect(self.start_speak)

    # 打开摄像头
    def show_camera(self):
        # print('pic')
        # self.gif = QMovie('popcat2.gif')
        # self.label_botface.setMovie(self.gif)
        # self.label_botface.setScaledContents(True)
        flag, self.image = self.cap.read()
        self.image = cv2.flip(self.image, 1)

        # opencv的颜色传输通道的BGR，应该转换成RGB，不然会出现异常的蓝色
        show = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
        gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)

        # 多个尺度空间进行人脸检测   返回检测到的人脸区域坐标信息
        face_zone = face_detect.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)
        if len(face_zone) != 0:
            self.exist_face = True
            print(self.exist_face)
            self.gif.start()
        else:
            self.gif.stop()
        # 绘制矩形检测人脸

        # gif.start()
        for x, y, w, h in face_zone:
            # print('yes')
            cv2.rectangle(self.image, pt1=(x, y), pt2=(x + w, y + h), color=[255, 255, 255], thickness=2)

        # 获取图片显示在label中，格式为RGB888
        showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0], QtGui.QImage.Format_RGB888)
        self.label_userface.setPixmap(QtGui.QPixmap.fromImage(showImage))
        self.label_userface.setScaledContents(True)

    def open_camera(self):
        if not self.timer_camera.isActive():
            flag = self.cap.open(self.CAM_NUM)
            if not flag:
                msg = QMessageBox.Warning
            else:
                self.timer_camera.start(30)
                # self.cameraButton.setText('关闭摄像头')
        else:
            self.close_camera()

    # 关闭摄像头
    def close_camera(self):
        self.timer_camera.stop()
        self.cap.release()
        self.cameraLabel.clear()
        # self.cameraButton.setText('打开摄像头')

    def start_speak(self):
        # 开始录制
        record = record_speech()
        record.record() # 实例化recoed，设置录制参数
        sr_result = record.recognition() # 开始识别
        self.label_usersays.setText(sr_result)

        # 把转换成的text传给rasa
        bot_text = dialog_with_pop(sr_result)
        self.label_botsays.setText(bot_text)
        # print(bot_text)
        tts = zhtts.TTS()  # use fastspeech2 by default
        tts.text2wav(bot_text, "demo.wav")
        self.gif.start()
        playsound("demo.wav")
        self.gif.stop()

if __name__ == '__main__':

    # ui窗口的开启
    app = QApplication(sys.argv)
    mainwindow = QMainWindow()
    ui = Ui_MainWindow(mainwindow)
    mainwindow.show()

    exit(app.exec_())
